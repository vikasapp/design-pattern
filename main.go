package main

import (
	"design-pattern/behavioral/momento"
)

func main() {
	////////////////////////////
	// SINGLETON DESIGN PATTERN
	//////////////////////////
	// var wg sync.WaitGroup
	// for i := 0; i < 20; i++ {
	// 	wg.Add(1)
	// 	go singlton.PrintInstance(i, &wg)
	// }
	// wg.Wait()

	////////////////////////////
	// Adapter DESIGN PATTERN
	//////////////////////////
	// adapter.TestAdapter()

	////////////////////////////
	// State DESIGN PATTERN
	//////////////////////////
	// state.TestStatePattern()

	////////////////////////////
	// Strategy DESIGN PATTERN
	//////////////////////////
	// stratgy.TestStrategyPattern()

	////////////////////////////
	// Observer DESIGN PATTERN
	//////////////////////////
	// observer.TestObserverPattern()

	////////////////////////////
	// Observer DESIGN PATTERN
	//////////////////////////
	// prototype.TestPrototyprPattern()

	////////////////////////////
	// Factory Method DESIGN PATTERN
	//////////////////////////
	// factorymethod.TestFactoryMethod()

	////////////////////////////
	// Biulder DESIGN PATTERN
	//////////////////////////
	// builder.TestBuilderPattern()

	////////////////////////////
	// Chain Of Responsibility PATTERN
	//////////////////////////
	// chainofresponsibility.TestChainOfResponsibility()

	////////////////////////////
	// Command Design PATTERN
	//////////////////////////
	// command.TestCommandPattern()

	////////////////////////////
	// Command Design PATTERN
	//////////////////////////
	// iterator.TestIteratorPattern()

	////////////////////////////
	// Mediator Design PATTERN
	//////////////////////////
	// mediator.TestMediatorPattern()

	////////////////////////////
	// Momento Design PATTERN
	//////////////////////////
	momento.TestMomentoPattern()
}
